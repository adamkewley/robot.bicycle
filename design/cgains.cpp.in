#include <algorithm>
#include "cgains.h"

namespace cg {

void lu_bounds(float theta_R_dot, const ControllerGains * ar[2]) {
  static ControllerGains temp;  // a little wasteful of space but oh well.
  temp.theta_R_dot = theta_R_dot;
  auto up = std::upper_bound(gains.begin(), gains.end(), temp);
  if (up == gains.end()) { // speed is greater than highest speed in range
    ar[0] = up;
    ar[1] = nullptr;
  } else if (up == gains.begin()) {  // speed is lower than lowest speed
    ar[0] = nullptr;
    ar[1] = up;
  } else { // normal case when speed is inside range
    ar[0] = up - 1;
    ar[1] = up;
  }
}

const std::array<ControllerGains, num_gains> gains = {{ "{{" }}
  /* ------------------ AUTOGENERATED CODE STARTS HERE ------------------- */
{% for k in range(NUMGAINS) %}
  { /* -------------- CONTROLLER GAINS FOR SPEED {{ k }} START -------------- */
{% for M in [(AROWS, ACOLS, "A_c"), (BROWS, BCOLS, "B_c"), (CROWS, CCOLS, "C_c")] %}
  { /* Matrix {{ M[2][0] }} in rowmajor order */
{% for i in range(M[0]) %}
{% set i_loop = loop %}
{% for j in range(M[1]) %}
{% if not (loop.last and i_loop.last) %}
    {{ GAINS[k][M[2]][i, j] }}f,
{% else %}
    {{ GAINS[k][M[2]][i, j] }}f
{% endif %}
{% endfor %}
{% endfor %}
  },
{% endfor %}
  {{ SPEED[k] }}f /* theta_R_dot at speed */
{% if not loop.last %}
  }, /* -------------- CONTROLLER GAINS FOR SPEED {{ k }} END --------------- */
{% else %}
  } /* --------------- CONTROLLER GAINS FOR SPEED {{ k }} END --------------- */
{% endif %}
{% endfor %}
{{ "}}" }}; /* gains */
} /* namespace cg */
